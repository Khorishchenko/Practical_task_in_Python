# Класи та об’єкти в Python

# Об’єкт — це набір даних (змінних) та методів (функцій). Клас — це креслення (план) об’єкта. Ми можемо уявити клас як ескіз (прототип) будинку. 
# Він містить всі деталі про поверхи, двері, вікна тощо. На основі цих описів ми будуємо будинок. 
# Будинок — це об’єкт. Оскільки з одного й того самого опису можна побудувати багато будинків, ми можемо створити багато об’єктів з одного класу.

# Створюємо клас
class Bike:
    name = ""
    gear = 0
 
# Створюємо об'єкт класу
bike1 = Bike()


# Отримуємо доступ до атрибутів об'єкта та присвоюємо нові значення
bike1.gear = 11
bike1.name = "Mountain Bike"
 
# Виводимо дані об'єкта на екран
print(f"Name: {bike1.name}, Gears: {bike1.gear} ")






# Методи в Python
# Функція, визначена всередині класу, називається методом.

# Створюємо клас
class Room:
    length = 0.0
    width = 0.0
    
    # Метод обчислення площі
    def calculate_area(self):
        print("Area of Room =", self.length * self.width)
 
# Створюємо об'єкт класу Room
study_room = Room()
 
# Надаємо нові значення всім атрибутам об'єкта
study_room.length = 42.5
study_room.width = 30.8
 
# Отримуємо доступ до методу всередині класу
study_room.calculate_area()





# Конструктори в Python
class Bike:
    # Функція-конструктор    
    def __init__(self, name = ""):
        self.name = name
 
bike1 = Bike("ma")
print(bike1.name)






# Конструктори в Python
# Конструктори зазвичай використовуються для ініціалізації об’єктів класу. 
# Їх завдання полягає у присвоюванні значень членам класу. 
# В Python метод __init__() називається конструктором і завжди викликається при створенні об’єкта.


# Типи конструкторів:

#    Конструктор за замовчуванням — це простий конструктор, який не приймає жодних параметрів. Його визначення має тільки один параметр, яким є посилання на створюваний
#    об’єкт.

#    Параметризований конструктор — це конструктор з параметрами: перший параметр — це посилання на створюваний об’єкт (self), а інші параметри надаються програмістом.


# Приклад конструктора за замовчуванням в Python:

class GeekforGeeks:
 
	# Конструктор за замовчуванням
	def __init__(self):
		self.geek = "Ravesli"
 
	# Виводимо дані
	def print_Geek(self):
		print(self.geek)
 
 
# Створюємо об'єкт класу
obj = GeekforGeeks()
 
# Викликаємо метод класу через об'єкт obj
obj.print_Geek()




# Приклад параметризованого конструктора в Python:
# Атрибути класу проти атрибутів екземпляра: Атрибути, оголошені на рівні класу (без self),
# є атрибутами класу і можуть бути спільними для всіх екземплярів класу. Ваша реалізація в даний момент визначає атрибути на рівні класу, 
# але вони не використовуються як атрибути екземпляра в конструкторі. Це може бути неочевидним для читачів коду.

class Addition:
	__first = 0
	__second = 0
	__answer = 0
 
	# Параметризований конструктор
	def __init__(self, f, s):
		self.__firstt = f
		self.__secondd = s
 
	def display(self):
		print("First number = " + str(self.__firstt))
		print("Second number = " + str(self.__secondd))
		print("Addition of two numbers = " + str(self.answer))
 
	def calculate(self):
		self.answer = self.__firstt + self.__secondd
 
 
# Створюємо об'єкт класу.
# При цьому викликається параметризований конструктор
obj1 = Addition(1000, 2000)
 
# Створюємо другий об'єкт того ж класу
obj2 = Addition(10, 20)
 
# Виконуємо операцію додавання через об'єкт obj1
obj1.calculate()
 
# Виконуємо операцію додавання через об'єкт obj2
obj2.calculate()
 
# Виводимо на екран результат роботи об'єкта obj1
obj1.display()
 
# Виводимо на екран результат роботи об'єкта obj2
obj2.display()







# Приклад використання конструктора за замовчуванням разом із параметризованим конструктором в Python:
class MyClass:
	def __init__(self, name=None):
		if name is None:
			print("Default constructor called")
		else:
			self.name = name
			print("Parameterized constructor called with name", self.name)
	
	def method(self):#Ми також визначаємо метод method(), який перевіряє наявність або відсутність в об’єкта атрибута name і виводить відповідне повідомлення на екран.
		if hasattr(self, 'name'):
			print("Method called with name", self.name)
		else:
			print("Method called without a name")
 
# Створюємо об'єкт класу за допомогою конструктора за замовчуванням
obj1 = MyClass()
 
# Викликаємо метод класу через об'єкт obj1
obj1.method()
 
# Створюємо об'єкт класу за допомогою параметризованого конструктора
obj2 = MyClass("John")
 
# Викликаємо метод класу через об'єкт obj2
obj2.method()









# Деструктори в Python
# Деструктори викликаються при знищенні об’єкта. В Python деструктори не є обов’язковими, як у C++, 
# тому що Python має збирач сміття, який автоматично виконує керування пам’яттю.

# Метод __del__() відомий як функція-деструктор у Python. Він викликається, коли всі посилання на об’єкт 
# були видалені, тобто коли об’єкт очищується збирачем сміття.


class Employee:
    # Конструктор класу
    def __init__(self):
        print('Employee created.')
 
    # Деструктор класу
    def __del__(self):
        print('Destructor called, Employee deleted.')
 
obj = Employee()
del obj


# Примітка: Деструктор викликається після завершення програми або коли всі посилання на об’єкт видалені, 
# тобто коли лічильник посилань стає рівним нулю, а не коли об’єкт виходить з області видимості.

class Employee:
    # Конструктор класу
    def __init__(self):
        print('Employee created')
  
    # Деструктор класу
    def __del__(self):
        print("Destructor called")
  
def Create_obj():
    print('Making Object...')
    obj = Employee()
    print('function end...')
    return obj
  
print('Calling Create_obj() function...')
obj = Create_obj()
print('Program End...')


