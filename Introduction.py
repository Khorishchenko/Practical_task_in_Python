

# // Функція print() в Python
# Функція print() виводить вказаний об’єкт в стандартний пристрій виводу (екран) або файл текстового потоку. 
# На відміну від інших мов програмування, функція print() у Python є унікальною та універсальною функцією.

# print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)

# Розглянемо детально:

#    objects — об’єкти для виводу. Символ * означає, що може бути декілька об’єктів;

#    sep — розділювач значень для виводу. За замовчуванням використовується пробіл ' ';

#    end — виводиться останнім у стейтменті;

#    file — вказуємо, куди виводити об’єкт;

#    flush — потік або файл примусово очищається, 
#     якщо значення параметра дорівнює True. За замовчуванням встановлено значення False.




# Приклад Python-програми з використанням функції print():
print("Welcome to aCode!")  
  
a = 15  
# У функції print() вказано два аргументи
print("a =", a)  
  
b = a  
# У функції print вказано три аргументи
print('a =', a, '= b')





# Простір імен та область видимості в Python
# Розглянемо приклад використання просторів імен в Python:


# Змінна global_var знаходиться у глобальному просторі імен
global_var = 15
 
def outer_function():
    # Змінна outer_var знаходиться у локальному просторі імен
    outer_var = 25
 
    def inner_function():
        # Змінна inner_var знаходиться у вкладеному локальному просторі імен 
        inner_var = 35
 
        print(inner_var)
 
    print(outer_var)
 
    inner_function()
 
# Виводимо значення глобальної змінної
print(global_var)
 
# Викликаємо зовнішню функцію та виводимо локальні та вкладені локальні змінні
outer_function()






# Ініціалізуємо глобальну змінну
global_var = 15
 
def my_function():
    # Ініціалізуємо локальну змінну
    local_var = 25
 
    # Змінюємо значення глобальної змінної
    global global_var
    global_var = 35
 
# Виводимо значення глобальної змінної
print(global_var)
 
# Викликаємо функцію та змінюємо глобальну змінну
my_function()
 
# Виводимо змінене значення глобальної змінної
print(global_var)

# Під час виклику my_function() ключове слово global 
# використовується для вказівки того, що global_var є глобальною змінною, та її значення змінюється на 35.





# Ключові слова та ідентифікатори в Python ->> https://acode.com.ua/keywords-identifiers-python/







# Коментарі в Python


# Багаторядкові коментарі в Python
''' Це також є
чудовим прикладом
багаторядкових коментарів '''









# Змінні, Константи та Літерали в Python
# Присвоюємо декілька значень декільком змінних


a, b, c = 5, 3.2, 'Hello'
 
print(a) # виведе 5
print(b) # виведе 3.2
print(c) # виведе Hello



# Правила іменування змінних

'''
snake_case
MACRO_CASE
camelCase
CapWords2 
'''


# Константи в Python
# Константа — це особливий тип змінної, значення якої не можна змінити. 
# У Python константи зазвичай оголошуються/визначаються в модулі 
# (окремий файл, що містить змінні, функції та інше, який імпортується в основний файл).



# Імпортуємо файл із константами, який створили вище
import constant
 
print(constant.PI) # виведе 3.14
print(constant.GRAVITY) # виведе 9.8



# Визначення константи
SIZE = 10

# Використання константи
print(SIZE)

# Спроба зміни константи (не рекомендується, але технічно можливо)
SIZE = 20
print(SIZE)



# Щоб створити константу SIZE в Python, потрібно дотримуватись угоди про іменування і записати її 
# ім'я великими літерами. Це буде вказувати, 
# що значення змінної не повинно змінюватись, навіть якщо Python технічно дозволяє це робити.







# Спеціальні літерали
# Python містить один спеціальний літерал None, який використовується для вказівки null-змінної. Наприклад:

value = None
 
print(value)








# https://acode.com.ua/type-conversion-and-casting-python/ 
# Перетворення (приведення) типів даних в Python
# У Python є два способи перетворення типів:

#    Неявне перетворення — автоматична конвертація типів даних інтерпретатором Python.

#    Явне перетворення — ручна конвертація типів даних програмістом за допомогою конкретних функцій у Python.


# Явне перетворення типів у Python


num_string = '14'
num_integer = 25
 
print("Data type of num_string before Type Casting:",type(num_string))
 


# Явне перетворення типів
num_string = int(num_string)
 
print("Data type of num_string after Type Casting:",type(num_string))
 
num_sum = num_integer + num_string
 
print("Sum:",num_sum)
print("Data type of num_sum:",type(num_sum))





# Оператори в Python -- > 
# Оператори — це спеціальні символи, які виконують операції над змінними та значеннями. Наприклад:

a = 7
b = 2
 
# Додавання
print ('Sum: ', a + b)  
 
# Віднімання
print ('Subtraction: ', a - b)   
 
# Множення
print ('Multiplication: ', a * b)  
 
# Ділення
print ('Division: ', a / b) 
 
# Цілочисельне ділення
print ('Floor Division: ', a // b)
 
# Залишок від ділення
print ('Modulo: ', a % b)  
 
# a у степені b
print ('Power: ', a ** b)






# Логічні оператори в Python

# Логічне І
print(True and True)     # True
print(True and False)    # False
 
# Логічне АБО
print(True or False)     # True
 
# Логічне НЕ
print(not True)          # False





# Спеціальні оператори в Python -- https://acode.com.ua/operators-python/

# В Python оператори is та is not використовуються для перевірки того, чи знаходяться два об’єкти в одній і тій же частині пам’яті. 
# Дві однакові за значеннями змінні не завжди є ідентичними.


x1 = 4
y1 = 4
x2 = 'Hello'
y2 = 'Hello'
x3 = [1,2,3]
y3 = [1,2,3]
 
print(x1 is not y1)  # виведе False
 
print(x2 is y2)  # виведе True
 
print(x3 is y3)  # виведе False






# Оператори належності в Python
# У Python оператори in та not in є операторами належності. 
# Вони використовуються для перевірки того, чи знаходиться значення або змінна в послідовності 
# (рядок, список, кортеж, набір або словник).
# В словнику ми можемо перевірити лише наявність ключа, але не значення.


x = 'Hello world'
y = {1:'a', 2:'b'}
 
# Перевіряємо, чи знаходиться 'H' у рядку x
print('H' in x)  # виведе True
 
# Перевіряємо, чи знаходиться 'hello' у рядку x
print('hello' not in x)  # виведе True
 
# Перевіряємо, чи є ключ '1' у словнику y
print(1 in y)  # виведе True
 
# Перевіряємо, чи є ключ 'a' у словнику y
print('a' in y)  # виведе False




#  end --> https://acode.com.ua/intro-python/