# Спадкування дозволяє створити новий клас на основі існуючого класу. Новий клас, що створюється, називається підкласом (дочірній або похідний клас), 
# а існуючий клас, від якого отримано дочірній клас, 
# називається суперкласом (батьківський або базовий клас).


# Підклас та суперклас в Python
# Визначаємо суперклас
class super_class:
    pass
    # Атрибути та методи суперкласу
 
# Спадкування
class sub_class(super_class):
    pass
    # Атрибути та метод super_class
    # Атрибути та метод sub_class





class Animal:
    # Атрибут та метод батьківського класу
    name = ""
    def eat(self):
        print("I can eat")
 
# Успадковуємо від класу Animal
class Dog(Animal):
    # Новий метод у дочірньому класі
    def display(self):
        # Доступ до атрибута name батьківського класу за допомогою self
        print("My name is ", self.name)
 
# Створюємо об'єкт дочірнього класу
labrador = Dog()
 
# Отримуємо доступ до атрибута та методу батьківського класу
labrador.name = "Rohu"
labrador.eat()
 
# Викликаємо метод дочірнього класу
labrador.display()




# Відносини в успадкуванні
# В Python успадкування — це відносини типу is-a (є). Ми використовуємо спадкування лише в тому випадку, коли між двома класами існує зв’язок типу “є”. Наприклад:

#    Автомобіль є Транспортним засобом

#    Яблуко є Фруктом

#    Кішка є Твариною

# Автомобіль може успадковуватись від Транспортний засіб, Яблуко може успадковуватися від Фрукт і так далі.

# Розглянемо ще один приклад спадкування в Python. Багатокутник — це замкнута фігура з 3 або більше сторонами. Припустимо, у нас є клас Polygon, визначений наступним чином:

class Polygon:
    # Ініціалізація кількості сторін
    def __init__(self, no_of_sides):
        self.n = no_of_sides
        self.sides = [0 for i in range(no_of_sides)]
 
    def inputSides(self):
        self.sides = [float(input("Enter side "+str(i+1)+" : ")) for i in range(self.n)]
 
    # Метод для виведення довжини кожної зі сторін багатокутника
    def dispSides(self):
        for i in range(self.n):
            print("Side",i+1,"is",self.sides[i])
 
class Triangle(Polygon):
    # Ініціалізація кількості сторін трикутника (3) шляхом виклику методу __init__() класу Polygon
    def __init__(self):
        Polygon.__init__(self,3)
 
    def findArea(self):
        a, b, c = self.sides
 
        # Обчислюємо напівпериметр
        s = (a + b + c) / 2
 
        # Використовуємо формулу Герона для обчислення площі трикутника
        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
        print('The area of the triangle is %0.2f' %area)
 
# Створюємо об'єкт класу Triangle
t = Triangle()
 
# Пропонуємо користувачеві ввести довжини сторін трикутника
t.inputSides()
 
# Виводимо довжини сторін трикутника
t.dispSides()
 
# Обчислюємо та виводимо площу трикутника
t.findArea()

 





# Перевизначення методів у спадкуванні
# З попереднього прикладу ми бачимо, що об’єкт підкласу може отримати доступ до методу суперкласу.

# Але якщо один і той самий метод присутній і в суперкласі, і в підкласі?

# У цьому випадку метод у підкласі перевизначає метод у суперкласі. Ця концепція відома як перевизначення методів у Python. Наприклад:

class Animal:
    # Атрибути та метод суперкласу
    name = ""
    def eat(self):
        print("I can eat")
 
# Успадковуємо від класу Animal
class Dog(Animal):
    # Перевизначаємо метод eat()
    def eat(self):
        print("I like to eat bones")
 
# Створюємо об'єкт підкласу
labrador = Dog()
 
# Викликаємо метод eat() через об'єкт класу Dog
labrador.eat()