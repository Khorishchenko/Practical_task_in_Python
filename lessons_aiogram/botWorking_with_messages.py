# –∏–º–ø–æ—Ä—Ç—ã
import asyncio
import logging
import sys
import json
import aiohttp
from config_reader import config
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command  import Command



from aiogram import F
from aiogram.client.default import DefaultBotProperties
# from aiogram.types import ParseMode




# ******************************************************************************************
# –°–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ, –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ (–æ–Ω–∏ –∂–µ ‚Äî —Å–µ—Ä–≤–∏—Å–Ω—ã–µ).
# ******************************************************************************************



# https://mastergroosha.github.io/aiogram-3-guide/messages/


# parse_mode = 'HTML'

#  –ö —Å—á–∞—Å—Ç—å—é, –≤ aiogram –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
# bot = Bot(
#     token = config.bot_token.get_secret_value(),
#     default = DefaultBotProperties(
#         parse = 'HTML'
#         # —Ç—É—Ç –µ—â—ë –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
#     )
# )

# –î–ª—è –∑–∞–ø–∏—Å–µ–π —Å —Ç–∏–ø–æ–º Secret* –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 
# –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ get_secret_value(), 
# —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–º–µ—Å—Ç–æ '*******'

bot = Bot(token = config.bot_token.get_secret_value())




# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message(Command("test1"))
async def cmd_test1(message: types.Message):
    await message.reply("Test 1")



# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
# –•—ç–Ω–¥–ª–µ—Ä cmd_test2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç.–∫. –¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ –Ω—ë–º –Ω–µ –∑–Ω–∞–µ—Ç. –ò—Å–ø—Ä–∞–≤–∏–º —ç—Ç—É –æ—à–∏–±–∫—É –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é:
async def cmd_test2(message: types.Message):
    await message.reply("Test 2")









#==================================================================================================#
# –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π —Å–∞—Ö–∞—Ä
# –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–æ–¥ —á–∏—â–µ –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–µ–µ, aiogram —Ä–∞—Å—à–∏—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ Telegram. 
# –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–º–µ—Å—Ç–æ bot.send_message(...) –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å message.answer(...) –∏–ª–∏ message.reply(...). 
# –í –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö —Å–ª—É—á–∞—è—Ö –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å chat_id, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

# –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É answer –∏ reply –ø—Ä–æ—Å—Ç–∞—è: 
# –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç, –≤—Ç–æ—Ä–æ–π –¥–µ–ª–∞–µ—Ç "–æ—Ç–≤–µ—Ç" –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ message:

@dp.message(Command("answer"))
async def cmd_answer(message: types.Message):
    await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")


@dp.message(Command("reply"))
async def cmd_reply(message: types.Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')



#==================================================================================================#
# answer –º–µ—Ç–æ–¥

# ÔøΩÔøΩ—ç–Ω–¥–ª–µ—Ä –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# @dp.message()
# async def echo(message: types.Message):
#     await message.answer(message.text)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É answer dice
@dp.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


# # –û–¥–Ω–∞–∫–æ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–¥–∏—Ç—å, –∫–∞–∫–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ –≤—ã–±—Ä–æ—à–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–±—ã—Ç–∏–µ  dice .  
# @dp.message(type.ContentTypes.DICE)
# async def handle_dice(message: types.Message):
#     dice_value = message.dice.value  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –≤—ã–±—Ä–æ—à–µ–Ω–Ω–æ–µ –∫—É–±–∏–∫–æ–º
#     await message.answer(f"–í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏: {dice_value}")
   

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É answer send_animation
@dp.message(Command("send_animation"))
async def send_animation(message: types.Message):
    try:
        animation_url = "https://i.natgeofe.com/k/63b1a8a7-0081-493e-8b53-81d01261ab5d/red-panda-full-body_4x3.jpg"
        await message.answer_animation(animation_url)
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ animation: {e}")









#==================================================================================================#
# –ü–µ—Ä–µ–¥–∞—á–∞ –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤¬∂

# –ì–¥–µ-—Ç–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
# –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ç–æ—á–∫–µ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
from datetime import datetime


# bot = ...
dp["started_at"] = datetime.now().strftime("%Y-%m-%d %H:%M")



@dp.message(Command("add_to_list"))
async def cmd_add_to_list(message: types.Message, mylist: list[int]):
    mylist.append(7)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ 7")


@dp.message(Command("show_list"))
async def cmd_show_list(message: types.Message, mylist: list[int]):
    await message.answer(f"–í–∞—à —Å–ø–∏—Å–æ–∫: {mylist}")


@dp.message(Command("info"))
async def cmd_info(message: types.Message, started_at: str):
    await message.answer(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {started_at}")







# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π 
#===========================================================================================================#
# —ç—Ç–æ, –ø–æ–∂–∞–ª—É–π, –æ–¥–Ω–æ –∏–∑ –≤–∞–∂–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —É –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –±–æ—Ç–æ–≤. 
# –¢–µ–∫—Å—Ç–æ–º –º–æ–∂–Ω–æ –≤—ã—Ä–∞–∑–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ –∏ –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ö–æ—á–µ—Ç—Å—è –∫—Ä–∞—Å–∏–≤–æ. 

from aiogram import F
from aiogram.enums import ParseMode



# –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä F.text, 
# —Ç–æ —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é /test
@dp.message(F.text, Command("test"))
async def any_message(message: types.Message):
    text = "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç! <u>HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π</u> "  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É –æ—Ç–≤–µ—Ç–∞
    await message.answer(
        "Hello, <b>world</b>!", 
        parse_mode=ParseMode.HTML
    )
    await message.answer(
        "Hello, *world*\!", 
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await message.answer(text, parse_mode = ParseMode.HTML )



# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞
@dp.message(Command("hello"))
async def cmd_hello(message: types.Message):
    await message.answer(
        f"Hello, <b>{message.from_user.full_name}</b>",
        parse_mode=ParseMode.HTML
    )





# –ù–æ —Ç—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç —é–∑–µ—Ä —Å –∏–º–µ–Ω–µ–º <C–ª–∞–≤–∏–∫777> –∏ –±–æ—Ç –º–æ–ª—á–∏—Ç! –ê –≤ –ª–æ–≥–∞—Ö –≤–∏–¥–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ: 
# aiogram.exceptions.TelegramBadRequest: 
# Telegram server says - Bad Request: can't parse entities: 
# Unsupported start tag "–°–ª–∞–≤–∏–∫777" at byte offset 7

from aiogram.utils.formatting import Text, Bold

@dp.message(Command("Hello"))
async def cmd_hello(message: types.Message):
    content = Text(
        "Hello, ",
        Bold(message.from_user.full_name)
    )
    await message.answer(
        **content.as_kwargs()
    )



# –£–ø–æ–º—è–Ω—É—Ç—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–≤–æ–ª—å–Ω–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π, 
# –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–¥–æ–±–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:
# https://docs.aiogram.dev/en/latest/utils/formatting.html

from aiogram.utils.formatting import (
    Bold, as_list, as_marked_section, as_key_value, HashTag
)


@dp.message(Command("advanced_example"))
async def cmd_advanced_example(message: types.Message):
    content = as_list(
        as_marked_section(
            Bold("Success:"),
            "Test 1",
            "Test 3",
            "Test 4",
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("Failed:"),
            "Test 2",
            marker="‚ùå ",
        ),
        as_marked_section(
            Bold("Summary:"),
            as_key_value("Total", 4),
            as_key_value("Success", 3),
            as_key_value("Failed", 1),
            marker="  ",
        ),
        HashTag("#test"),
        sep="\n\n",
    )
    await message.answer(**content.as_kwargs())






# –†–∞–±–æ—Ç–∞ —Å entities¬∂
# Telegram —Å–∏–ª—å–Ω–æ —É–ø—Ä–æ—â–∞–µ—Ç –∂–∏–∑–Ω—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º, –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. 
# –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏, —Ç–∏–ø–∞ e-mail, 
# –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —é–∑–µ—Ä–Ω–µ–π–º–∞ –∏ –¥—Ä. –º–æ–∂–Ω–æ –Ω–µ –¥–æ—Å—Ç–∞–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏, 
# –∞ –∏–∑–≤–ª–µ—á—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Message –∏ –ø–æ–ª—è entities,
import html
from aiogram import types

# @dp.message(F.text)
@dp.message(Command("Pass"))
async def extract_data(message: types.Message):
     # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
    if message.entities is None or len(message.entities) == 0:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (URL, E-mail –∏–ª–∏ –∫–æ–¥).")
        return

    data = {
        "url": "<N/A>",
        "email": "<N/A>",
        "code": "<N/A>"
    }
    entities = message.entities or []
    for item in entities:
        if item.type in data.keys():
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
            # data[item.type] = message.text[item.offset : item.offset+item.length]
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ
            data[item.type] = item.extract_from(message.text)
    await message.reply(
        "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n"
        f"URL: {html.escape(data['url'])}\n"
        f"E-mail: {html.escape(data['email'])}\n"
        f"–ü–∞—Ä–æ–ª—å: {html.escape(data['code'])}"
    )








# –ö–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ã¬∂
# Telegram –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ø–æ—Å–æ–±–æ–≤ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û–¥–Ω–∏–º –∏–∑ –Ω–∏—Ö —è–≤–ª—è—é—Ç—Å—è 
# –∫–æ–º–∞–Ω–¥—ã: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å–æ —Å–ª—ç—à–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, /new –∏–ª–∏ /ban. 
# –ò–Ω–æ–≥–¥–∞ –±–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω —Ç–∞–∫, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –ø–æ—Å–ª–µ —Å–∞–º–æ–π –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫–∏–µ-—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, 
# –≤—Ä–æ–¥–µ /ban 2d –∏–ª–∏ /settimer 20h This is delayed message. –í —Å–æ—Å—Ç–∞–≤–µ aiogram –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä Command(), 
# —É–ø—Ä–æ—â–∞—é—â–∏–π –∂–∏–∑–Ω—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.


# –ö–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ã
@dp.message(Command("settimer"))
async def cmd_settimer(
        message: types.Message,
        command
):
    # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∏–∫–∞–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Ç–æ
    # command.args –±—É–¥–µ—Ç None
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤—Å—Ç—Ä–µ—á–Ω–æ–º—É –ø—Ä–æ–±–µ–ª—É
    try:
        delay_time, text_to_send = command.args.split(" ", maxsplit=1)
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –º–µ–Ω—å—à–µ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π, –≤—ã–ª–µ—Ç–∏—Ç ValueError
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/settimer <time> <message>"
        )
        return
    await message.answer(
        "–¢–∞–π–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"–í—Ä–µ–º—è: {delay_time}\n"
        f"–¢–µ–∫—Å—Ç: {text_to_send}"
    )








# –î–∏–ø–ª–∏–Ω–∫–∏¬∂
# –ö–æ–º–∞–Ω–¥–∞ /start –≤ Telegram –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —á–µ—Ä–µ–∑ –¥–∏–ø–ª—ñ–Ω–∫ (t.me/bot?start=xxx), 
# —â–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–¥–∞—î —ó—Ö –±–æ—Ç—É –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ "–ü–æ—á–∞—Ç–∏", —ñ —Ü–µ –∑—Ä—É—á–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö —Å–∏—Å—Ç–µ–º —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.

import re
from aiogram import F
from aiogram.types import Message
from aiogram.filters import Command, CommandObject, CommandStart

@dp.message(Command("help"))
@dp.message(CommandStart(
    deep_link=True, magic=F.args == "help"
))
async def cmd_start_help(message: Message):
    await message.answer("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π")


@dp.message(CommandStart(
    deep_link=True,
    magic=F.args.regexp(re.compile(r'book_(\d+)'))
))
async def cmd_start_book(
        message: Message,
        command: CommandObject
):
    book_number = command.args.split("_")[1]
    await message.answer(f"Sending book ‚Ññ{book_number}")








# –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
# –û–±—ã—á–Ω–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ Telegram –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤–æ–π –ø–æ –ø–æ—Ä—è–¥–∫—É —Å—Å—ã–ª–∫–∏. 
# –≠—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é, –ø–µ—Ä–µ–¥–∞–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ link_preview_options –º–µ—Ç–æ–¥–∞ send_message() 
# –æ–±—ä–µ–∫—Ç LinkPreviewOptions:


# –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from aiogram.types import LinkPreviewOptions

@dp.message(Command("links"))
async def cmd_links(message: Message):
    links_text = (
        "https://nplus1.ru/news/2024/05/23/voyager-1-science-data"
        "\n"
        "https://t.me/telegram"
    )
    # –°—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
    options_1 = LinkPreviewOptions(is_disabled=True)
    await message.answer(
        f"–ù–µ—Ç –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫\n{links_text}",
        link_preview_options=options_1
    )

    # -------------------- #

    # –ú–∞–ª–µ–Ω—å–∫–æ–µ –ø—Ä–µ–≤—å—é
    # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è prefer_small_media –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –µ—â—ë –∏ url
    options_2 = LinkPreviewOptions(
        url="https://nplus1.ru/news/2024/05/23/voyager-1-science-data",
        prefer_small_media=True
    )
    await message.answer(
        f"–ú–∞–ª–µ–Ω—å–∫–æ–µ –ø—Ä–µ–≤—å—é\n{links_text}",
        link_preview_options=options_2
    )

    # -------------------- #

    # –ë–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é
    # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è prefer_large_media –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –µ—â—ë –∏ url
    options_3 = LinkPreviewOptions(
        url="https://nplus1.ru/news/2024/05/23/voyager-1-science-data",
        prefer_large_media=True
    )
    await message.answer(
        f"–ë–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é\n{links_text}",
        link_preview_options=options_3
    )

    # -------------------- #

    # –ú–æ–∂–Ω–æ —Å–æ—á–µ—Ç–∞—Ç—å: –º–∞–ª–µ–Ω—å–∫–æ–µ –ø—Ä–µ–≤—å—é –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º
    options_4 = LinkPreviewOptions(
        url="https://nplus1.ru/news/2024/05/23/voyager-1-science-data",
        prefer_small_media=True,
        show_above_text=True
    )
    await message.answer(
        f"–ú–∞–ª–µ–Ω—å–∫–æ–µ –ø—Ä–µ–≤—å—é –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º\n{links_text}",
        link_preview_options=options_4
    )

    # -------------------- #

    # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–µ–¥–ø–æ—Å–º–æ—Ç—Ä–∞,
    options_5 = LinkPreviewOptions(
        url="https://t.me/telegram"
    )
    await message.answer(
        f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ –ø–µ—Ä–≤–æ–π —Å—Å—ã–ª–∫–∏\n{links_text}",
        link_preview_options=options_5
    )










# –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã
# –ü–æ–º–∏–º–æ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è 
# –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–∏—Ñ–∫–∏, –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç.–¥

# –£ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ file_id –∏ file_unique_id.

# –ö –ø—Ä–∏–º–µ—Ä—É, —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –∑–∞—Å—Ç–∞–≤–∏—Ç –±–æ—Ç–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–π –∂–µ –≥–∏—Ñ–∫–æ–π, —á—Ç–æ –±—ã–ª–∞ –ø—Ä–∏—Å–ª–∞–Ω–∞:
@dp.message(F.animation)
async def echo_gif(message: Message):
    await message.reply_animation(message.animation.file_id)



# –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ file_id!
# https://mastergroosha.github.io/aiogram-3-guide/messages/



# –í aiogram 3.x –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç 3 –∫–ª–∞—Å—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –º–µ–¥–∏–∞ - FSInputFile, BufferedInputFile, URLInputFile,
# —Å –Ω–∏–º–∏ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
# https://docs.aiogram.dev/en/dev-3.x/api/upload_file.html


# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Å–µ–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:
from aiogram.types import FSInputFile, URLInputFile, BufferedInputFile

@dp.message(Command('images'))
async def upload_photo(message: Message):
    # –°—é–¥–∞ –±—É–¥–µ–º –ø–æ–º–µ—â–∞—Ç—å file_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏–º–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
    file_ids = []

    # –ß—Ç–æ–±—ã –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å BufferedInputFile, –≤–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º"
    # –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ `open()`. –ù–æ, –≤–æ–æ–±—â–µ –≥–æ–≤–æ—Ä—è, —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–±
    # –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–π—Ç–æ–≤ –∏–∑ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    # –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–∞–∫–∏—Ö-–ª–∏–±–æ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ Pillow
    with open("buffer_emulation.jpg", "rb") as image_from_buffer:
        result = await message.answer_photo(
            BufferedInputFile(
                image_from_buffer.read(),
                filename="image from buffer.jpg"
            ),
            caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞"
        )
        file_ids.append(result.photo[-1].file_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    image_from_pc = FSInputFile("image_from_pc.jpg")
    result = await message.answer_photo(
        image_from_pc,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
    )
    file_ids.append(result.photo[-1].file_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ
    image_from_url = URLInputFile("https://picsum.photos/seed/groosha/400/300")
    result = await message.answer_photo(
        image_from_url,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ"
    )
    file_ids.append(result.photo[-1].file_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n"+"\n".join(file_ids))








# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
# –ü–æ–º–∏–º–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –±–æ—Ç –º–æ–∂–µ—Ç —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ –∫ —Å–µ–±–µ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä/—Å–µ—Ä–≤–µ—Ä. 
# –î–ª—è —ç—Ç–æ–≥–æ —É –æ–±—ä–µ–∫—Ç–∞ —Ç–∏–ø–∞ Bot –µ—Å—Ç—å –º–µ—Ç–æ–¥ download()





# –ê–ª—å–±–æ–º—ã
# –¢–æ, —á—Ç–æ –º—ã –Ω–∞–∑—ã–≤–∞–µ–º ¬´–∞–ª—å–±–æ–º–∞–º–∏¬ª (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏) –≤ Telegram, –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è \
#     —Å –º–µ–¥–∏–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –æ–±—â–∏–π media_group_id –∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–∑—É–∞–ª—å–Ω–æ ¬´—Å–∫–ª–µ–∏–≤–∞—é—Ç—Å—è¬ª –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞—Ö.

from aiogram.filters import Command
from aiogram.types import FSInputFile, Message
from aiogram.utils.media_group import MediaGroupBuilder

@dp.message(Command("album"))
async def cmd_album(message: Message):
    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –¥–ª—è –∞–ª—å–±–æ–º–∞
    album_builder = MediaGroupBuilder(
        caption = "–û–±—â–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∞–ª—å–±–æ–º–∞"
    )


    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    album_builder.add(
        type = "photo",
        media = FSInputFile("image_from_pc.jpg")
        # caption="–ü–æ–¥–ø–∏—Å—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–µ–¥–∏–∞"

    )



    # –ï—Å–ª–∏ –º—ã —Å—Ä–∞–∑—É –∑–Ω–∞–µ–º —Ç–∏–ø, —Ç–æ –≤–º–µ—Å—Ç–æ –æ–±—â–µ–≥–æ add
    # –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞—Ç—å add_<—Ç–∏–ø>
    album_builder.add_photo(
        # –î–ª—è —Å—Å—ã–ª–æ–∫ –∏–ª–∏ file_id –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–∞–∑—É —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
        media = URLInputFile("https://picsum.photos/seed/groosha/400/300")
    )

    # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–µ–¥–∏–∞-—Ç–∏–ø–æ–≤ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ add_<—Ç–∏–ø>
    album_builder.add_photo(
        media = "<–≤–∞—à file_id>"
    )
    await message.answer_media_group(
        # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–∑–≤–∞—Ç—å build()
        media = album_builder.build()
    )








# –°–µ—Ä–≤–∏—Å–Ω—ã–µ (—Å–ª—É–∂–µ–±–Ω—ã–µ) —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(F.new_chat_members)
async def somebody_added(message: Message):
    for user in message.new_chat_members:
        # –ø—Ä–æ–ø–µ—Ä—Ç–∏ full_name –±–µ—Ä—ë—Ç —Å—Ä–∞–∑—É –∏–º—è –ò —Ñ–∞–º–∏–ª–∏—é 
        # (–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –≤—ã—à–µ —É —é–∑–µ—Ä–æ–≤ –Ω–µ—Ç —Ñ–∞–º–∏–ª–∏–∏)
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}")




#==================================================================================================#

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    # –ì–¥–µ-—Ç–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main(): –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –•—ç–Ω–¥–ª–µ—Ä cmd_test2
    dp.message.register(cmd_test2, Command("test2"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    # await dp.start_polling(bot)
    await dp.start_polling(bot, mylist=[1, 2, 3])


# ÔøΩÔøΩ–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
if __name__ == "__main__":
    asyncio.run(main())
